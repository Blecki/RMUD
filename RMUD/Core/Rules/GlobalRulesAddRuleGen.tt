<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="RuleGen.t4" #>
//This is generated code. Do not modify this file; modify the template that produces it.

using System;

namespace RMUD
{
	public static partial class GlobalRules
	{	
		public static void DeclarePerformRuleBook(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<PerformResult>(Name).Description = Description;
		}
		
		public static void DeclareValueRuleBook<RT>(String Name, String Description)
        {
            Rules.FindOrCreateRuleBook<RT>(Name).Description = Description;
        }

		public static void DeclareCheckRuleBook(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<CheckResult>(Name).Description = Description;
		}
				
        public static RuleBuilder<PerformResult> Perform(String Name)
        {
            return Rules.AddRule<PerformResult>(Name);
        }
		
        public static RuleBuilder<RT> Value<RT>(String Name)
        {
            return Rules.AddRule<RT>(Name);
        }

		public static RuleBuilder<CheckResult> Check(String Name)
        {
            return Rules.AddRule<CheckResult>(Name);
        }

<#for (var i = 1; i < ac; ++i){#>
		public static void DeclarePerformRuleBook<<#Args(i);#>>(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<PerformResult>(Name, <#TypeOfs(i);#>).Description = Description;
		}
		
		public static void DeclareValueRuleBook<<#Args(i);#>, RT>(String Name, String Description)
        {
            Rules.FindOrCreateRuleBook<RT>(Name, <#TypeOfs(i);#>).Description = Description;
        }

		public static void DeclareCheckRuleBook<<#Args(i);#>>(String Name, String Description)
		{
			Rules.FindOrCreateRuleBook<CheckResult>(Name, <#TypeOfs(i);#>).Description = Description;
		}
				
        public static RuleBuilder<<#Args(i);#>, PerformResult> Perform<<#Args(i);#>>(String Name)
        {
            return Rules.AddRule<<#Args(i);#>, PerformResult>(Name);
        }
		
        public static RuleBuilder<<#Args(i);#>, RT> Value<<#Args(i);#>, RT>(String Name)
        {
            return Rules.AddRule<<#Args(i);#>, RT>(Name);
        }

		public static RuleBuilder<<#Args(i);#>, CheckResult> Check<<#Args(i);#>>(String Name)
        {
            return Rules.AddRule<<#Args(i);#>, CheckResult>(Name);
        }

<#}#>
	}
}
